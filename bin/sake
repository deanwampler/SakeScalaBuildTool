#!/bin/sh -- 
#===================================================================
# sake - driver command for "sake" build tool.
# Run "sake -h" for help.
#===================================================================

if [ "$SAKE_HOME" = "" ] ; then
    SAKE_HOME=${0%bin/sake}
    if [ "$SAKE_HOME" = "" ] ; then
        SAKE_HOME="."
    elif [ "$SAKE_HOME" = "./sake" ] ; then
        # Actually running in sake's bin directory!
        SAKE_HOME=".."
    fi
    export SAKE_HOME=$(cd $SAKE_HOME; pwd)  # resolve to absolute...
fi
CLASSPATH=${SAKE_HOME}/lib/specs-1.4.1.jar:${SAKE_HOME}/lib/junit-4.4.jar:${SAKE_HOME}/lib/sake.jar:$CLASSPATH

set +x
file=sake.scala
args[0]=-cp
args[1]=$CLASSPATH

function showhelp {
    cat <<-EOF
usage: sake [-h] [-f sake.scala] [scala_opts] [targets]
where:
    -h              => this help message (also "--h", "-help", and "--help" allowed)
    -f sake.scala   => "sake.scala" is the default build file name.
    scala_opts      => any other options are passed to the "scala" command.
                       Note that -cp and -classpath items will be prepended to the CLASSPATH.
    targets         => what to build; defaults to "all"
EOF
}

while [ $# -gt 0 ]
do
	case $1 in
		-h|--h|-help|--help)
			showhelp
			exit 0
			;;
		-f)
			shift
			file=$1
			;;
		-cp|-classpath)
			shift
			args[1]=$1:${args[1]}
			;;
		-*)
			args[${#args[@]}]=$1
			shift
			args[${#args[@]}]=$1
			;;
		*)
			targets[${#targets[@]}]=$1
			;;
	esac
	shift
done

if [ "${#targets[@]}" == 0 ]; then
    targets[0]="all"
fi

scala ${args[@]} <<-EOF
:load $file
build("${targets[@]}")
EOF
