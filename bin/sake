#!/usr/bin/env bash --
#===================================================================
# sake - driver command for "sake" build tool.
# Run "sake -h" for help.
#===================================================================

if [ "$SAKE_HOME" = "" ] ; then
  SAKE_HOME=${0%bin/sake}
  if [ "$SAKE_HOME" = "" ] ; then
    SAKE_HOME="."
  elif [ "$SAKE_HOME" = "./sake" ] ; then
    # Actually running in sake's bin directory!
    SAKE_HOME=".."
  fi
  export SAKE_HOME=$(cd $SAKE_HOME; pwd)  # resolve to absolute... (TODO: a better way?)
fi

for lib in ${SAKE_HOME}/lib/*.jar
do
  case "$lib" in
    *src.jar) ;;  # do nothing
    *) CLASSPATH=$lib:$CLASSPATH ;;
  esac
done

# TODO FIX
CLASSPATH=target/scala-2.12/classes

file=sake.scala
let interactive=1
targets=()
directory=$PWD

function help {
    cat <<-EOF
usage: sake [options] [targets]
where the following sake options must come first:

    -h | --help             Show this help message and exit.
    -i | --interactive      Interactive mode. After loading the build file, it puts you at the scala
                            command prompt. Use commands like "build("all")" to build targets.
    -f | --file build_file  The build file name, where "sake.scala" is the default.
    -C | --directory dir    Run in this directory, rather than the current working directory.
                            (-C is a make convention)
    targets                 What to build; defaults to "all", unless in interactive mode, in which
                            case nothing is built by default. If targets are specified, they are
                            built after loading the build file and before presenting the scala prompt.
EOF
}

while [ $# -gt 0 ]
do
	case $1 in
		-h|--help)
			help
			exit 0
			;;
		-i|--interactive)
      let interactive=0
			;;
		-f|--file)
			shift
			file=$1
			;;
    -C|--directory)
      shift
      directory=$1
      ;;
		-classpath)
			shift
			CLASSPATH=$CLASSPATH:$1
			;;
		-*)
      echo "Unrecognized option: $1"
      help
      exit 1
			;;
		*)
			targets+=($1)
			;;
	esac
	shift
done



[[ $interactive -eq 1 ]] && [[ "${#targets[@]}" -eq 0 ]] && targets=("all")

function stdinput {
cat <<-EOF
:load $file
Project.all.map { case (name, project) => project.build("${targets[@]}") }
EOF
}

cd $directory
if [[ $interactive -eq 0 ]]
then
  CLASSPATH=$CLASSPATH scala -language:postfixOps ${args[@]} -i $file
else
  stdinput | CLASSPATH=$CLASSPATH scala -language:postfixOps ${args[@]}
fi
echo ""
