#!/bin/sh -- 
#===================================================================
# sake - driver command for "sake" build tool.
# Run "sake -h" for help.
#===================================================================

set +x

if [ "$SAKE_HOME" = "" ] ; then
    SAKE_HOME=${0%bin/sake}
    if [ "$SAKE_HOME" = "" ] ; then
        SAKE_HOME="."
    elif [ "$SAKE_HOME" = "./sake" ] ; then
        # Actually running in sake's bin directory!
        SAKE_HOME=".."
    fi
    export SAKE_HOME=$(cd $SAKE_HOME; pwd)  # resolve to absolute... (TODO: a better way?)
fi
for lib in ${SAKE_HOME}/lib/*.jar
do
    case "$lib" in
        *src.jar)
            ;;  # do nothing
        *)
            CLASSPATH=$lib:$CLASSPATH
            ;;
    esac
done

cygwin=false;
case "`uname`" in
    CYGWIN*) 
        cygwin=true 
        SAKE_HOME=`cygpath --$format "$SAKE_HOME"`
        CLASSPATH=`cygpath --path --$format "$CLASSPATH"`
        ;;
esac

export CLASSPATH
file=sake.scala
interactive="false"
args[0]=-classpath
args[1]=$CLASSPATH

function showhelp {
    cat <<-EOF
usage: sake [-h] [-f sake.scala] [scala_opts] [targets]
where:
    -h              => This help message (also "--h", "-help", "--help", etc. are allowed)
    -i              => Interactive mode. After loading the build file, it puts you at the scala
                       command prompt. Use commands like "build('all)" to build targets.
    -f build_file   => The build file name, where "sake.scala" is the default.
    scala_opts      => Any other options are passed to the "scala" command. However, any
                       -classpath items will be prepended to the CLASSPATH.
    targets         => What to build; defaults to "all", unless in interactive mode, in which
                       case nothing is built by default. If targets are specified, they are
                       built after loading the build file and before presenting the scala prompt.
EOF
}

while [ $# -gt 0 ]
do
	case $1 in
		-h*|--h*)
			showhelp
			exit 0
			;;
		-i)
			interactive="true"
			;;
		-f)
			shift
			file=$1
			;;
		-classpath)
			shift
			args[1]=$1:${args[1]}
			;;
		-*)
			args[${#args[@]}]=$1
			shift
			args[${#args[@]}]=$1
			;;
		*)
			targets[${#targets[@]}]=$1
			;;
	esac
	shift
done

if [ $interactive = "false" ]; then
    if [ "${#targets[@]}" == 0 ]; then
        targets[0]="all"
    fi
else
    scala -version | grep --silent 2.7.2
    if [ $? = 0 ] ; then
        echo "The interactive option can't be used with scala v2.7.2, because a bug in"
        echo "the -i option causes it to load the build file twice. Upgrade to a more recent version instead."
        exit 1
    fi
fi

function stdinput {
cat <<-EOF
:load $file
build("${targets[@]}")
EOF
}

if [ $interactive = "true" ]; then
    scala ${args[@]} -i $file
else
    stdinput | scala ${args[@]}
fi
echo ""
